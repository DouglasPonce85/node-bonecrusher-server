{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Swagger IQVIA",
    "description": "IQVIA Backend - swagger-2.0 specification",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "name": "Swagger API Team"
    },
    "license": {
      "name": "MIT"
    }
  },
  "host": "localhost",
  "basePath": ":7000",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json",
    "application/xml"
  ],
  "produces": [
    "application/xml",
    "application/json"
  ],
  "paths": {
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Lists all products",
        "description": "Lists all products",
        "operationId": "getAllProducts",
        "produces": [
          "application/json",
          "application/xml",
          "text/xml",
          "text/html"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Products"
              }
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Adds a new product",
        "description": "Creates a new product",
        "operationId": "create",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Product object",
            "required": true,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/Products"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#"
            }
          }
        }
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Finds product by ID",
        "description": "For valid response try integer IDs with value >= 1. Other values will generated exceptions.",
        "operationId": "getProductById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of product that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Products"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Updates an existing product",
        "description": "Updates an existing product",
        "operationId": "updateProductById",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Existing id to search and update product",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Product object info that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Products"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid opertation"
          },
          "404": {
            "description": "Product not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Deletes an existing product",
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteProductById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "ID of the product to delete",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/products/user/{userId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Finds product by user ID",
        "description": "For valid response try integer IDs with value >= 1. Other values will generated exceptions.",
        "operationId": "getProductsByUserId",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user that needs to fetch products from",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Products"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/products/organization/{organizationId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Finds product by organization ID",
        "description": "For valid response try integer IDs with value >= 1. Other values will generated exceptions.",
        "operationId": "getProductsByOrganizationId",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the organization that needs to fetch products from",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Products"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Product not found"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Lists all users",
        "description": "Fetch all users",
        "operationId": "getAllUsers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Users"
              }
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Adds a new user",
        "description": "Creates a new user",
        "operationId": "create",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object",
            "required": true,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/Users"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#"
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Finds user by ID",
        "description": "For valid response try integer IDs with value >= 1. Other values will generated exceptions.",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates user by ID",
        "description": "Updates an existing user",
        "operationId": "updateUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Existing id to search and update user",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "User object info that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid opertation"
          },
          "404": {
            "description": "User not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes an exiting user by ID",
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "ID of the user to delete",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/organization/{organizationId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Finds user by organization ID",
        "description": "For valid response try integer IDs with value >= 1. Other values will generated exceptions.",
        "operationId": "getUsersByOrganizationId",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the organization that needs to fetch users from",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/{userId}/products/{productId}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates product for user",
        "description": "Updates product for user",
        "operationId": "updateProductForUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Existing user id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "productId",
            "in": "path",
            "description": "Existing product id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Product object info that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Products"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid opertation"
          },
          "404": {
            "description": "User not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Lists all organizations",
        "description": "Fetch all organizations",
        "operationId": "getAllOrganizations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Organizations"
              }
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Adds a new organization",
        "description": "Creates a new organization",
        "operationId": "create",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object",
            "required": true,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/Organizations"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#"
            }
          }
        }
      }
    },
    "/organizations/{organizationId}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "Finds organization by ID",
        "description": "For valid response try integer IDs with value >= 1. Other values will generated exceptions.",
        "operationId": "getOrganizationById",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the organization that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Organizations"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Organization not found"
          }
        }
      },
      "put": {
        "tags": [
          "Organizations"
        ],
        "summary": "Updates organization by ID",
        "description": "Updates an existing organization",
        "operationId": "updateOrganizationById",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Existing id to search and update organization",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Organization object info that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organizations"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid opertation"
          },
          "404": {
            "description": "Organization not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Organizations"
        ],
        "summary": "Deletes an exiting organization by ID",
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteOrganizationById",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the organization to delete",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Organization not found"
          }
        }
      }
    },
    "/organizations/{organizationId}/products/{productId}": {
      "put": {
        "tags": [
          "Organizations"
        ],
        "summary": "Updates product for an organization",
        "description": "Updates product for organization",
        "operationId": "updateProductForOrganization",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Existing organization id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "productId",
            "in": "path",
            "description": "Existing product id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Product object info that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organizations"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid opertation"
          },
          "404": {
            "description": "Organization not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/datasets": {
      "get": {
        "tags": [
          "Datasets"
        ],
        "summary": "Lists all datasets",
        "description": "Fetch all datasets",
        "operationId": "getAllDatasets",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Datasets"
              }
            },
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Datasets"
        ],
        "summary": "Adds a new dataset",
        "description": "Creates a new dataset",
        "operationId": "create",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Dataset object",
            "required": true,
            "schema": {
              "type": "object",
              "items": {
                "$ref": "#/definitions/Datasets"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#"
            }
          }
        }
      }
    },
    "/datasets/{datasetId}": {
      "get": {
        "tags": [
          "Datasets"
        ],
        "summary": "Finds dataset by ID",
        "description": "For valid response try integer IDs with value >= 1. Other values will generated exceptions.",
        "operationId": "getDatasetById",
        "parameters": [
          {
            "name": "datasetId",
            "in": "path",
            "description": "ID of the dataset that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Datasets"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Dataset not found"
          }
        }
      },
      "put": {
        "tags": [
          "Datasets"
        ],
        "summary": "Updates dataset by ID",
        "description": "Updates an existing dataset",
        "operationId": "updateDatasetById",
        "parameters": [
          {
            "name": "datasetId",
            "in": "path",
            "description": "Existing id to search and update dataset",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "dataset object info that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Datasets"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid opertation"
          },
          "404": {
            "description": "Dataset not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Datasets"
        ],
        "summary": "Deletes an exiting dataset by ID",
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "deleteDatasetById",
        "parameters": [
          {
            "name": "datasetId",
            "in": "path",
            "description": "ID of the dataset to delete",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Dataset not found"
          }
        }
      }
    },
    "/datasets/organization/{organizationId}": {
      "get": {
        "tags": [
          "Datasets"
        ],
        "summary": "Finds dataset by organization ID",
        "description": "For valid response try integer IDs with value >= 1. Other values will generated exceptions.",
        "operationId": "getDatasetsByOrganizationId",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the organization that needs to fetch datasets from",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Datasets"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Dataset not found"
          }
        }
      }
    },
    "/datasets/{organizationCode}/{datasetCode}": {
      "put": {
        "tags": [
          "Datasets"
        ],
        "summary": "Updates lastupdated field for a dataset by Code",
        "description": "update lastupdated field for a dataset",
        "operationId": "updateLastUpdated",
        "parameters": [
          {
            "name": "organizationCode",
            "in": "path",
            "description": "Organization code",
            "required": true,
            "type": "string"
          },
          {
            "name": "datasetCode",
            "in": "path",
            "description": "Dataset Code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid opertation"
          },
          "404": {
            "description": "Dataset not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    }
  },
  "definitions": {
    "Products": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "icon": {
          "type": "integer",
          "format": "int32"
        },
        "infourl": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Products"
      }
    },
    "Users": {
      "type": "object",
      "required": [
        "id",
        "organization_id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "organization_id": {
          "type": "integer",
          "format": "int64"
        },
        "login": {
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "type": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Organizations": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "clusteredId": {
          "type": "string"
        },
        "crmsid": {
          "type": "string"
        }
      }
    },
    "Datasets": {
      "type": "object",
      "required": [
        "id",
        "organization_id"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "organization_id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    }
  }
}